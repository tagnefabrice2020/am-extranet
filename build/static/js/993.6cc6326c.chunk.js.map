{"version":3,"file":"static/js/993.6cc6326c.chunk.js","mappings":"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","sources":["services/UserService.js","redux/User/UserActionCreators.js","views/pages/users/NewUser.js"],"sourcesContent":["import axios from \"axios\";\nimport { API_URL } from \"../config\";\n\nclass UserService {\n    fetchUsers (page, perPage) {\n        return axios.get(API_URL + `/users?page=${page}&perPage=${perPage}`)\n            .then((response) => {\n                const users = response.data.data;\n                return users;\n            })\n    }\n\n    store (user) {\n        return axios.post(API_URL + '/users', user)\n            .then((response) => {\n                return response;\n            })\n    }\n\n    search (value, page, perPage) {\n        return axios.get(API_URL + `/users/${value}/search?page=${page}&perPage=${perPage}`)\n            .then((response) => {\n                const users = response.data.data;\n                return users;\n            })\n    }\n\n    switchStatus (uuid) {\n        return axios.patch(API_URL + `/users/${uuid}/status`)\n            .then((response) => {\n                return response;\n            })\n    }\n\n    fetchOneUser (uuid) {\n        return axios.get(API_URL + `/users/${uuid}/show`)\n            .then((response) => {\n                return response.data.user;\n            })\n    }\n\n    updateUser (user, uuid) {\n        return axios.patch(API_URL + `/users/${uuid}/update`, user)\n            .then((response) => {\n                return response\n            })\n    } \n\n}\n\nexport default new UserService();","\nimport { toast } from 'react-toastify';\nimport UserService from \"../../services/UserService\";\nimport { FETCH_ONE_USER_ERROR, FETCH_ONE_USER_SUCCESS, FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USER_FAILURE, ONE_USER_REQUEST, RESET, RESET_FORM, SEARCHING, SEARCH_SUCCESS, STORE_USER_ERROR, STORING_USER, SWITCH_STATUS, TOTAL_PAGES, USERS_CURRENT_PAGE, USERS_PER_PAGE } from \"./UserActionTypes\"\n\nexport const fetchUsersRequest = () => {\n    return {\n        type: FETCH_USERS_REQUEST\n    };\n}\n\nexport const fetchUsersSuccess = (users) => {\n    return {\n        type: FETCH_USERS_SUCCESS,\n        payload: users\n    };\n}\n\nexport const fetchUsersFailure = (error) => {\n    return {\n        type: FETCH_USER_FAILURE,\n        payload: error\n    };\n}\n\nexport const setUsersPerPage = (perPage) => {\n    return {\n        type: USERS_PER_PAGE,\n        payload: perPage\n    };\n}\n\nexport const setPage = (page) => {\n    return {\n        type: USERS_CURRENT_PAGE,\n        payload: page\n    };\n}\n\nexport const setTotalPage = (total) => {\n    return {\n        type: TOTAL_PAGES,\n        payload: total\n    };\n}\n\nexport const searching = (value) => {\n    return {\n        type: SEARCHING,\n        payload: value\n    };\n}\n\nexport const searchSuccess = (users, last_page) => {\n    return {\n        type: SEARCH_SUCCESS,\n        payload: users, \n        last_page: last_page\n        \n    }\n}\n\nexport const reset = (initialUsers) => {\n    return {\n        type: RESET,\n        payload: initialUsers\n    };\n}\n\nexport const storingUser = () => {\n    return {\n        type: STORING_USER\n    };\n}\n\nexport const resetForm = () => {\n    return {\n        type: RESET_FORM\n    };\n}\n\nexport const storeUserError = () => {\n    return {\n        type: STORE_USER_ERROR\n    };\n}\n\nexport const switchStatus = (uuid) => {\n    return {\n        type: SWITCH_STATUS,\n        payload: uuid\n    };\n}\n\nexport const fetchOneUserRequest = () => {\n    return {\n        type: ONE_USER_REQUEST\n    };\n}\n\nexport const fetchOneUserRequestSucces = (user) => {\n    return {\n        type: FETCH_ONE_USER_SUCCESS,\n        payload: user\n    }\n}\n\nexport const fetchSingleUserFailed = () => {\n    return {\n        type: FETCH_ONE_USER_ERROR\n    }\n}\n\n\nexport const fetchUsers = (page, perPage) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const users = state.users;\n        dispatch(fetchUsersRequest());\n        if (users.searchValue.length <= 0)  {\n            UserService.fetchUsers(page, perPage)\n                .then((users) => {\n                    //console.log(users)\n                    const totalPage = Math.ceil(users.total / users.per_page);\n                    dispatch(setPage(users.current_page));\n                    dispatch(setUsersPerPage(users.per_page));\n                    dispatch(setTotalPage(totalPage));\n                    dispatch(fetchUsersSuccess(users.data, users.last_page));\n                    return Promise.resolve();\n                }, \n                (error) => {\n                    dispatch(fetchUsersFailure(error.message));\n                    return Promise.reject();\n                })\n        } \n    } \n}\n\nexport const searchUsers = (page, perPage) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const users = state.users;\n        if (users.searchValue.length > 0) {\n            UserService.search(users.searchValue, page, perPage)\n                .then((users) => {\n                    const totalPage = Math.ceil(users.total / users.per_page);\n                    dispatch(setPage(users.current_page));\n                    dispatch(setUsersPerPage(users.per_page));\n                    dispatch(setTotalPage(totalPage));\n                    dispatch(searchSuccess(users.data));\n                    return Promise.resolve(); \n                }, \n                (error) => {\n                    dispatch(fetchUsersFailure(error.message));\n                    return Promise.reject();\n                })\n        } else {\n            dispatch(reset(users.initialUsers));\n            dispatch(setTotalPage(users.initialTotalPages));\n        }\n    }\n}\n\nexport const storeUser = (user) => {\n    return (dispatch) => {\n        dispatch(storingUser());\n        UserService.store(user)\n            .then((response) => {\n                if(typeof(response.data) === 'string' && response.data === 'success') {\n                    dispatch(resetForm());\n                    toast.success('Utilisateur ajouter avec sucèss.');\n                    return Promise.resolve();\n                }\n            },\n            (error) => {\n                toast.error('La sauvegarde de l\\'utilisateur a échouée.');\n                return Promise.reject();\n            })\n\n    }\n}\n\nexport const fetchOneUser = (user) => {\n    return dispatch => {\n        dispatch(fetchOneUserRequest());\n        UserService.fetchOneUser(user)\n            .then((user) => {\n                dispatch(fetchOneUserRequestSucces(user));\n                return Promise.resolve();\n            }, error => {\n                dispatch(fetchSingleUserFailed());\n                toast.error('Impossible de charger les information de l\\'utilisateur.');\n            })\n    }\n}\n\nexport const switchUserStatus = (uuid) => {\n    return dispatch => {\n        UserService.switchStatus(uuid)\n            .then((response) => {\n                if(response.status === 201) {\n                    dispatch(switchStatus(uuid));\n                    toast.success('Le status de l\\'utilisateur a été changer.');\n                }\n            }, (error) => {\n                toast.error('Le status de l\\'utilisateur n\\'a pas été changer.');\n            })\n    }\n}\n\nexport const updateUser = (user, uuid) => {\n    return dispatch => {\n        UserService.updateUser(user, uuid)\n            .then((response) => {\n                if(response.status === 200) {\n                    toast.success('L\\'utilisateur enregistrer avec sucess.');\n                }\n            }, (error) => {\n                console.log(error)\n            })\n    }\n}\n\n\nexport const test = (user) => {\n    return (dispatch, getState) => {\n        console.log(user)\n        const state = getState();\n        dispatch(searchSuccess({}));\n        console.log(state);\n    }\n}\n\n\n/*\nconst state = getState();\n        console.log(state.users.searchValue);\n        if (state.users.searchValue.length > 0) {\n            UserService.search(state.users.searchValue, page, perPage)\n                .then((users) => {\n                    dispatch(searchSuccess(users.data));\n                    return Promise.resolve();\n                }, (error) => {\n                    return Promise.reject();\n                })\n        } else {\n            dispatch(reset(state.users.initialUsers));\n        }*/","import React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { object, string, mixed } from \"yup\";\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { storeUser } from \"../../../redux/User/UserActionCreators\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport { API_URL } from \"../../../config\";\n\nconst userSchema = object({\n    firstname: string().required('Veuillez saisir votre Prénom').typeError('Veuillez saisir des characters alphabetic.'),\n    lastname: string().required('Veuillez saisir votre Nom').typeError('Veuillez saisir des characters alphabetic.'),\n    email: string()\n            .email('Veuillez entrer une adresse email valid.')\n            .required('Veuillez entre votre email.')\n            .typeError('Veuillez entrer une adresse email valid.')\n            .test('check-if-user-exist', 'Il exist déjà un client avec cette email.', async value => {\n                value = value.length === 0 ? 'empty' : value\n                const result = await axios.get(API_URL + `/check-if-email-exist/${value}`)\n                return result.data !== 1\n              }),\n    role: mixed().oneOf(['1', '3', '2', '4'], 'Vous devez choisir parmis les options prescrit.').required('Veuillez choisir une option.').typeError('Vous devez choisir parmis les options prescrit.')\n});\n\nconst NewUser = ({storeUser, users}) => {\n    const {register, formState, reset, handleSubmit} = useForm({\n        mode: 'unTouched',\n        resolver: yupResolver(userSchema)\n    });\n\n\n    const {errors, isSubmitting} = formState;\n\n    useEffect(() => {\n        if(users.reset.form) {\n            reset();\n        }\n    }, [users.reset.form, reset]);\n\n    const newUser = (data) => {\n        storeUser(data);\n    }\n\n    return (\n        <div className=\"content-wrapper\">\n            {/* Content Wrapper. Contains page content */}\n            {/* Content Header (Page header) */}\n            <section className=\"content-header\">\n            <div className=\"container-fluid\">\n                <div className=\"row mb-2\">\n                <div className=\"col-sm-6\">\n                    <h1>Ajouter un Utilisateur</h1>\n                </div>\n                <div className=\"col-sm-6\">\n                    <ol className=\"breadcrumb float-sm-right\">\n                    <li className=\"breadcrumb-item active\">Utilisateur</li>\n                    <li className=\"breadcrumb-item active\">Ajouter un Utilisateur</li>\n                    </ol>\n                </div>\n                </div>\n            </div>{/* /.container-fluid */}\n            </section>\n\n            {/* Main content */}\n            <section className=\"content\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                    {/* left column */}\n                    <div className=\"col-md-12\">\n                        {/* general form elements */}\n                        <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h3 className=\"card-title\">Ajouter un Utilisateur</h3>\n                        </div>\n                        {/* /.card-header */}\n                        {/* form start */}\n                        <form onSubmit={handleSubmit(newUser)}>\n                            <div className=\"card-body\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleInputEmail1\">Prénom</label>\n                                    <input \n                                        type=\"firstname\" \n                                        className={\"form-control \" + (errors.firstname && ` is-border-red`) }\n                                        placeholder=\"Prénom de l'utilisateur\"\n                                        {...register('firstname')}\n                                    />\n                                    {errors.firstname && <small className=\"form-text is-red\">{errors.firstname.message}</small>}\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleInputEmail1\">Nom</label>\n                                    <input \n                                        type=\"lastname\" \n                                        className={\"form-control \" + (errors.lastname && `is-border-red`)}\n                                        placeholder=\"Nom de l'utilisateur\" \n                                        {...register('lastname')}\n                                    />\n                                    {errors.lastname && <small className=\"form-text is-red\">{errors.lastname.message}</small>}\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleInputEmail1\">Email</label>\n                                    <input \n                                        type=\"email\" \n                                        className={\"form-control \" + (errors.email && `is-border-red`)}\n                                        placeholder=\"Entre votre email\"\n                                        {...register('email')} \n                                    />\n                                    {errors.email && <small className=\"form-text is-red\">{errors.email.message}</small>}\n                                </div>\n                            \n                                <div className=\"form-group\">\n                                    <label htmlFor=\"exampleInputEmail1\">Role</label>\n                                    <select \n                                        className={\"form-control \" + (errors.role && `is-border-red`)}\n                                        {...register('role')}\n                                    >\n                                        <option value=\"1\">Administrateur</option>\n                                        <option value=\"2\">Agent</option>\n                                        <option value=\"3\">Client</option>\n                                        <option value=\"4\">Salarié</option>\n                                    </select>\n                                    {errors.role && <small className=\"form-text text-muted is-danger\">{errors.role.message}</small>}\n                                </div>\n                            </div>\n                            {/* /.card-body */}\n                            <div className=\"card-footer\">\n                                <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>{isSubmitting ? 'Sauvegarde en cours...' : 'Enregistrer'}</button>\n                            </div>\n                        </form>\n                        </div>\n                        {/* /.card */}\n                        </div>\n                    </div>\n                    {/* /.row */}\n                </div>{/* /.container-fluid */}\n            </section>\n            {/* /.content */}\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        storeUser: (user) => dispatch(storeUser(user)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps) (NewUser);"],"names":["UserService","page","perPage","axios","API_URL","then","response","data","user","value","uuid","fetchUsersFailure","error","type","FETCH_USER_FAILURE","payload","setUsersPerPage","USERS_PER_PAGE","setPage","USERS_CURRENT_PAGE","setTotalPage","total","TOTAL_PAGES","searching","SEARCHING","searchSuccess","users","last_page","SEARCH_SUCCESS","fetchUsers","dispatch","getState","FETCH_USERS_REQUEST","searchValue","length","totalPage","Math","ceil","per_page","current_page","FETCH_USERS_SUCCESS","fetchUsersSuccess","Promise","resolve","message","reject","searchUsers","initialUsers","RESET","initialTotalPages","storeUser","STORING_USER","RESET_FORM","toast","fetchOneUser","ONE_USER_REQUEST","FETCH_ONE_USER_SUCCESS","fetchOneUserRequestSucces","FETCH_ONE_USER_ERROR","switchUserStatus","status","SWITCH_STATUS","switchStatus","updateUser","console","log","test","state","userSchema","object","firstname","string","required","typeError","lastname","email","result","role","mixed","oneOf","connect","useForm","mode","resolver","yupResolver","register","formState","reset","handleSubmit","errors","isSubmitting","useEffect","form","className","onSubmit","htmlFor","placeholder","disabled"],"sourceRoot":""}