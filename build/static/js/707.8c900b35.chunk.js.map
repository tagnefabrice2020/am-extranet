{"version":3,"file":"static/js/707.8c900b35.chunk.js","mappings":"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","sources":["exportToCSV.js","views/pages/exporter/exporter.js"],"sourcesContent":["import React from 'react'\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\n\nconst ExportCSV = ({csvData, fileName}) => {\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n\n    const fileExtension = '.xlsx';\n\n    const exportToCSV = (csvData, fileName) => {\n        const ws = XLSX.utils.json_to_sheet(csvData);\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], {type: fileType});\n        FileSaver.saveAs(data, fileName + fileExtension);\n    }\n    return (\n        <button className='ml-2 btn btn-success' onClick={(e) => exportToCSV(csvData,fileName)}>Exporter</button>\n    )\n}\n\nexport default ExportCSV;\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { date, object } from \"yup\";\nimport { API_URL } from \"../../../config\";\n//import ReactExport from 'react-export-excel';\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport ExportCSV from \"../../../exportToCSV\";\n\n//const ExcelFile = ReactExport.ExcelFile;\n//const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\n\nconst Export = () => {\n    const [dateType, setDateType] = useState('');\n    const [exportData, setExportDate] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    const exportInfo = dateType === 'interval' ? object({\n        from: date().required('La date est information requise!').typeError('Veuillez inserer une date!').max(new Date()),\n        to: date().required('La date est information requise!').typeError('Veuillez inserer une date!'),\n    }) : object({\n        date: date().required('La date est information requise!').typeError('Veuillez inserer une date!').max(new Date()),\n    });\n\n    const { register, formState, handleSubmit, watch } = useForm({\n        mode: 'unTouched',\n        resolver: yupResolver(exportInfo),\n    });\n\n    const DataSet = [\n        {\n            column: [\n                {title: 'Ref Lot'}, {title: 'Ref RDV EDL'}, {title: 'Type d\\'intervention'}, {title: 'Nature du bien'}, {title: 'Date et heure'}, {title: 'Client'}, \n                {title: 'Nom du passeur'}, {title: 'Nom de L\\'agent ratacheé'}, {title: 'Nom du Locataire'}, {title: 'Prenom du Locataire'}, {title: 'Numéro de téléphone'}, \n                {title: 'Email'}, {title: 'Identité de l\\'ancien Locataire'}, {title: 'Surface du bien mettre carré'}, {title: 'Type'}, {title: 'Etage'}, {title: 'N° Logement'}, {title: 'N° Cave'}, \n                {title: 'Adresse'}, {title: 'Complément d\\'adresse'}, {title: 'Code postal'}, {title: 'ville'}, {title: 'Nom du propriétaire'}, {title: 'Prénom du propriétaire'}, {title: 'Email du propriétaire'}, \n                {title: 'Référence'}, {title: 'Liste des doculents a récuérer'}, {title: 'Consignes particulères'}, {title: 'Informations diverses'}\n            ],\n            data: exportData.map((data) => [\n                {value: data.ref_lot},\n                {value: data.ref_rdv_edl},\n                {value: data.type},\n                {value: data.property_category},\n                {value: data.date_rdv},\n                {value: data.first_name},\n                {value: data.nom_du_passeur},\n                {value: data.agent},\n                {value: data.tenant_last_name},\n                {value: data.tenant_first_name},\n                {value: data.tenant_contact},\n                {value: data.tenant_email},\n                {value: data.aceint_tenant_info},\n                {value: data.property_surface_area},\n                {value: data.property_type},\n                {value: data.property_floor_number},\n                {value: data.property_housing_number},\n                {value: data.property_cave_number},\n                {value: data.property_addresse},\n                {value: data.property_postal_code},\n                {value: data.property_city},\n                {value: data.date},\n                {value: data.lanlord_last_name},\n                {value: data.lanlord_first_name},\n            ])\n        }\n    ];\n\n    const { errors, isSubmitting } = formState;\n\n    const toMinDate = watch('from');\n\n\n    const exportAppointment = async (data) => {\n        setLoading(true);\n        setExportDate([]);\n        await axios.post(API_URL + '/export/appointments', data)\n            .then((response) => {\n                console.log(response);\n                setExportDate(response.data);\n                setLoading(false);\n            })\n\n    }\n\n    return (\n        <div className=\"content-wrapper\">\n            {/* Content Wrapper. Contains page content */}\n            {/* Content Header (Page header) */}\n\n            <section className=\"content-header\">\n                <div className=\"container-fluid\">\n                    <div className=\"row mb-2\">\n                        <div className=\"col-sm-6\">\n                            <h1>Exporter</h1>\n                        </div>\n                        <div className=\"col-sm-6\">\n                            <ol className=\"breadcrumb float-sm-right\">\n                                <li className=\"breadcrumb-item active\">Exporter</li>\n                            </ol>\n                        </div>\n                    </div>\n                </div>{/* /.container-fluid */}\n            </section>\n\n            {/* Main content */}\n            <section className=\"content\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {/* left column */}\n                        <div className=\"col-md-12\">\n                            {/* general form elements */}\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\">Exporter</h3>\n                                </div>\n                                {/* /.card-header */}\n                                {/* form start */}\n                                <form onSubmit={handleSubmit(exportAppointment)}>\n\n                                    <div className=\"card-body\">\n                                        <div className=\"form-group\">\n                                            <label htmlFor=\"exampleInputEmail1\">Date Type</label>\n                                            <select\n                                                className={\"form-control \" + (errors.date_type && `is-border-red`)}\n                                                onChange={(event) => {setDateType(event.target.value); setExportDate([])}}\n                                            >\n                                                <option>-- Selectioner le type date d'export</option>\n                                                <option value=\"interval\">Interval</option>\n                                                {/*<option value=\"daily\">Journalier</option>*/}\n                                            </select>\n                                        </div>\n\n\n\n                                        {dateType === 'interval' &&\n                                            <div className=\"row\">\n                                                <div className=\"col\">\n                                                    <div className=\"form-group\">\n                                                        <label htmlFor=\"exampleInputEmail1\">De</label>\n                                                        <input\n                                                            type=\"date\"\n                                                            className={\"form-control \" + (errors.from && `is-border-red`)}\n                                                            {...register('from')}\n                                                        />\n                                                        {errors.from && <small className=\"form-text is-red\">{errors.from.message}</small>}\n                                                    </div>\n\n                                                </div>\n                                                <div className=\"col\">\n                                                    <div className=\"form-group\">\n                                                        <label htmlFor=\"exampleInputEmail1\">A</label>\n                                                        <input\n                                                            type=\"date\"\n                                                            min={toMinDate}\n                                                            disabled={toMinDate == 'undefined' || toMinDate == null ? true : false }\n                                                            className={\"form-control \" + (errors.to && `is-border-red`)}\n                                                            {...register('to')}\n                                                        />\n                                                        {errors.to && <small className=\"form-text is-red\">{errors.to.message}</small>}\n                                                    </div>\n\n                                                </div>\n                                            </div>\n                                        }\n                                        {dateType === 'daily' &&\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"exampleInputEmail1\">Date</label>\n                                                <input\n                                                    type=\"date\"\n                                                    className={\"form-control \" + (errors.date && `is-border-red`)}\n                                                    {...register('date')}\n                                                />\n                                                {errors.date && <small className=\"form-text is-red\">{errors.date.message}</small>}\n                                            </div>\n\n                                        }\n                                    </div>\n                                    {/* /.card-body */}\n                                    <div className=\"card-footer\">\n                                        <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>{isSubmitting ? 'Chargement en cours...' : 'Charger'}</button>\n                                        {!loading && exportData.length > 0 && <ExportCSV csvData={exportData} fileName={new Date()} />}\n                                        {/**!loading && exportData.length > 0 && <ExcelFile \n                                            filename={new Date()} \n                                            element={<button type=\"button\">Télécharger</button>}>\n                                                <ExcelSheet dataSet={DataSet} name='rdv' />\n                                        </ExcelFile>**/}\n                                    </div>\n                                </form>\n                            </div>\n                            {/* /.card */}\n                        </div>\n                    </div>\n                    {/* /.row */}\n                </div>{/* /.container-fluid */}\n            </section>\n            {/* /.content */}\n        </div>\n    );\n}\n\nexport default Export;"],"names":["csvData","fileName","className","onClick","e","wb","Sheets","XLSX","SheetNames","excelBuffer","bookType","type","data","Blob","FileSaver","exportToCSV","useState","dateType","setDateType","exportData","setExportDate","loading","setLoading","exportInfo","object","from","date","required","typeError","max","Date","to","useForm","mode","resolver","yupResolver","register","formState","handleSubmit","watch","errors","map","value","ref_lot","ref_rdv_edl","property_category","date_rdv","first_name","nom_du_passeur","agent","tenant_last_name","tenant_first_name","tenant_contact","tenant_email","aceint_tenant_info","property_surface_area","property_type","property_floor_number","property_housing_number","property_cave_number","property_addresse","property_postal_code","property_city","lanlord_last_name","lanlord_first_name","isSubmitting","toMinDate","exportAppointment","axios","API_URL","then","response","console","log","onSubmit","htmlFor","date_type","onChange","event","target","message","min","disabled","length"],"sourceRoot":""}