{"version":3,"file":"static/js/262.c1aad6cb.chunk.js","mappings":"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","sources":["services/UserService.js","redux/User/UserActionCreators.js","views/pages/users/EditUser.js"],"sourcesContent":["import axios from \"axios\";\nimport { API_URL } from \"../config\";\n\nclass UserService {\n    fetchUsers (page, perPage) {\n        return axios.get(API_URL + `/users?page=${page}&perPage=${perPage}`)\n            .then((response) => {\n                const users = response.data.data;\n                return users;\n            })\n    }\n\n    store (user) {\n        return axios.post(API_URL + '/users', user)\n            .then((response) => {\n                return response;\n            })\n    }\n\n    search (value, page, perPage) {\n        return axios.get(API_URL + `/users/${value}/search?page=${page}&perPage=${perPage}`)\n            .then((response) => {\n                const users = response.data.data;\n                return users;\n            })\n    }\n\n    switchStatus (uuid) {\n        return axios.patch(API_URL + `/users/${uuid}/status`)\n            .then((response) => {\n                return response;\n            })\n    }\n\n    fetchOneUser (uuid) {\n        return axios.get(API_URL + `/users/${uuid}/show`)\n            .then((response) => {\n                return response.data.user;\n            })\n    }\n\n    updateUser (user, uuid) {\n        return axios.patch(API_URL + `/users/${uuid}/update`, user)\n            .then((response) => {\n                return response\n            })\n    } \n\n}\n\nexport default new UserService();","\nimport { toast } from 'react-toastify';\nimport UserService from \"../../services/UserService\";\nimport { FETCH_ONE_USER_ERROR, FETCH_ONE_USER_SUCCESS, FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USER_FAILURE, ONE_USER_REQUEST, RESET, RESET_FORM, SEARCHING, SEARCH_SUCCESS, STORE_USER_ERROR, STORING_USER, SWITCH_STATUS, TOTAL_PAGES, USERS_CURRENT_PAGE, USERS_PER_PAGE } from \"./UserActionTypes\"\n\nexport const fetchUsersRequest = () => {\n    return {\n        type: FETCH_USERS_REQUEST\n    };\n}\n\nexport const fetchUsersSuccess = (users) => {\n    return {\n        type: FETCH_USERS_SUCCESS,\n        payload: users\n    };\n}\n\nexport const fetchUsersFailure = (error) => {\n    return {\n        type: FETCH_USER_FAILURE,\n        payload: error\n    };\n}\n\nexport const setUsersPerPage = (perPage) => {\n    return {\n        type: USERS_PER_PAGE,\n        payload: perPage\n    };\n}\n\nexport const setPage = (page) => {\n    return {\n        type: USERS_CURRENT_PAGE,\n        payload: page\n    };\n}\n\nexport const setTotalPage = (total) => {\n    return {\n        type: TOTAL_PAGES,\n        payload: total\n    };\n}\n\nexport const searching = (value) => {\n    return {\n        type: SEARCHING,\n        payload: value\n    };\n}\n\nexport const searchSuccess = (users, last_page) => {\n    return {\n        type: SEARCH_SUCCESS,\n        payload: users, \n        last_page: last_page\n        \n    }\n}\n\nexport const reset = (initialUsers) => {\n    return {\n        type: RESET,\n        payload: initialUsers\n    };\n}\n\nexport const storingUser = () => {\n    return {\n        type: STORING_USER\n    };\n}\n\nexport const resetForm = () => {\n    return {\n        type: RESET_FORM\n    };\n}\n\nexport const storeUserError = () => {\n    return {\n        type: STORE_USER_ERROR\n    };\n}\n\nexport const switchStatus = (uuid) => {\n    return {\n        type: SWITCH_STATUS,\n        payload: uuid\n    };\n}\n\nexport const fetchOneUserRequest = () => {\n    return {\n        type: ONE_USER_REQUEST\n    };\n}\n\nexport const fetchOneUserRequestSucces = (user) => {\n    return {\n        type: FETCH_ONE_USER_SUCCESS,\n        payload: user\n    }\n}\n\nexport const fetchSingleUserFailed = () => {\n    return {\n        type: FETCH_ONE_USER_ERROR\n    }\n}\n\n\nexport const fetchUsers = (page, perPage) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const users = state.users;\n        dispatch(fetchUsersRequest());\n        if (users.searchValue.length <= 0)  {\n            UserService.fetchUsers(page, perPage)\n                .then((users) => {\n                    //console.log(users)\n                    const totalPage = Math.ceil(users.total / users.per_page);\n                    dispatch(setPage(users.current_page));\n                    dispatch(setUsersPerPage(users.per_page));\n                    dispatch(setTotalPage(totalPage));\n                    dispatch(fetchUsersSuccess(users.data, users.last_page));\n                    return Promise.resolve();\n                }, \n                (error) => {\n                    dispatch(fetchUsersFailure(error.message));\n                    return Promise.reject();\n                })\n        } \n    } \n}\n\nexport const searchUsers = (page, perPage) => {\n    return (dispatch, getState) => {\n        const state = getState();\n        const users = state.users;\n        if (users.searchValue.length > 0) {\n            UserService.search(users.searchValue, page, perPage)\n                .then((users) => {\n                    const totalPage = Math.ceil(users.total / users.per_page);\n                    dispatch(setPage(users.current_page));\n                    dispatch(setUsersPerPage(users.per_page));\n                    dispatch(setTotalPage(totalPage));\n                    dispatch(searchSuccess(users.data));\n                    return Promise.resolve(); \n                }, \n                (error) => {\n                    dispatch(fetchUsersFailure(error.message));\n                    return Promise.reject();\n                })\n        } else {\n            dispatch(reset(users.initialUsers));\n            dispatch(setTotalPage(users.initialTotalPages));\n        }\n    }\n}\n\nexport const storeUser = (user) => {\n    return (dispatch) => {\n        dispatch(storingUser());\n        UserService.store(user)\n            .then((response) => {\n                if(typeof(response.data) === 'string' && response.data === 'success') {\n                    dispatch(resetForm());\n                    toast.success('Utilisateur ajouter avec sucèss.');\n                    return Promise.resolve();\n                }\n            },\n            (error) => {\n                toast.error('La sauvegarde de l\\'utilisateur a échouée.');\n                return Promise.reject();\n            })\n\n    }\n}\n\nexport const fetchOneUser = (user) => {\n    return dispatch => {\n        dispatch(fetchOneUserRequest());\n        UserService.fetchOneUser(user)\n            .then((user) => {\n                dispatch(fetchOneUserRequestSucces(user));\n                return Promise.resolve();\n            }, error => {\n                dispatch(fetchSingleUserFailed());\n                toast.error('Impossible de charger les information de l\\'utilisateur.');\n            })\n    }\n}\n\nexport const switchUserStatus = (uuid) => {\n    return dispatch => {\n        UserService.switchStatus(uuid)\n            .then((response) => {\n                if(response.status === 201) {\n                    dispatch(switchStatus(uuid));\n                    toast.success('Le status de l\\'utilisateur a été changer.');\n                }\n            }, (error) => {\n                toast.error('Le status de l\\'utilisateur n\\'a pas été changer.');\n            })\n    }\n}\n\nexport const updateUser = (user, uuid) => {\n    return dispatch => {\n        UserService.updateUser(user, uuid)\n            .then((response) => {\n                if(response.status === 200) {\n                    toast.success('L\\'utilisateur enregistrer avec sucess.');\n                }\n            }, (error) => {\n                console.log(error)\n            })\n    }\n}\n\n\nexport const test = (user) => {\n    return (dispatch, getState) => {\n        console.log(user)\n        const state = getState();\n        dispatch(searchSuccess({}));\n        console.log(state);\n    }\n}\n\n\n/*\nconst state = getState();\n        console.log(state.users.searchValue);\n        if (state.users.searchValue.length > 0) {\n            UserService.search(state.users.searchValue, page, perPage)\n                .then((users) => {\n                    dispatch(searchSuccess(users.data));\n                    return Promise.resolve();\n                }, (error) => {\n                    return Promise.reject();\n                })\n        } else {\n            dispatch(reset(state.users.initialUsers));\n        }*/","import { yupResolver } from \"@hookform/resolvers/yup\";\nimport React, { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { object, string, mixed } from \"yup\";\nimport axios from \"axios\";\nimport { API_URL } from \"../../../config\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchOneUser, updateUser } from \"../../../redux/User/UserActionCreators\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\n\n\nconst EditUser = ({ users, fetchOneUser, updateUser }) => {\n\n    const { uuid } = useParams();\n\n    const userSchema = object({\n        firstname: string().required('Veuillez saisir votre Prénom').typeError('Veuillez saisir des characters alphabetic.'),\n        lastname: string().required('Veuillez saisir votre Nom').typeError('Veuillez saisir des characters alphabetic.'),\n        email: string()\n            .email('Veuillez entrer une adresse email valid.')\n            .required('Veuillez entre votre email.')\n            .typeError('Veuillez entrer une adresse email valid.')\n            .test('check-if-user-exist', 'Il exist déjà un client avec cette email.', async value => {\n                value = value.length === 0 ? 'empty' : value\n                const result = await axios.get(API_URL + `/check-if-email-exist/${value}/oneUser/${uuid}`)\n                return result.data !== 1\n            }),\n        role: mixed().oneOf(['1', '3', '2', '4'], 'Vous devez choisir parmis les options prescrit.').required('Veuillez choisir une option.').typeError('Vous devez choisir parmis les options prescrit.')\n    });\n\n    const { register, formState, handleSubmit } = useForm({\n        mode: 'unTouched',\n        resolver: yupResolver(userSchema)\n    });\n\n    useEffect(() => {\n        fetchOneUser(uuid);\n    }, [uuid, fetchOneUser]);\n\n    const { isSubmitting, errors } = formState;\n\n    const editUser = (data) => {\n        updateUser(data, uuid);\n    }\n\n    return (\n        <div className=\"content-wrapper\">\n            {/* Content Wrapper. Contains page content */}\n            {/* Content Header (Page header) */}\n            <section className=\"content-header\">\n                <div className=\"container-fluid\">\n                    <div className=\"row mb-2\">\n                        <div className=\"col-sm-6\">\n                            <h1>Modifier un Utilisateur</h1>\n                        </div>\n                        <div className=\"col-sm-6\">\n                            <ol className=\"breadcrumb float-sm-right\">\n                                <li className=\"breadcrumb-item active\">Utilisateur</li>\n                                <li className=\"breadcrumb-item active\">Modifier un Utilisateur</li>\n                            </ol>\n                        </div>\n                    </div>\n                </div>{/* /.container-fluid */}\n            </section>\n\n            {/* Main content */}\n            <section className=\"content\">\n                <div className=\"container-fluid\">\n                    <div className=\"row\">\n                        {/* left column */}\n                        <div className=\"col-md-12\">\n                            {/* general form elements */}\n                            <div className=\"card\">\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\">Modifier l'utilisateur</h3>\n                                </div>\n                                {/* /.card-header */}\n                                {/* form start */}\n                                {users.oneUserLoading && <>\n                                    <FormBlockAnimation>\n                                        <div>\n                                            <p></p>\n                                            <div></div>\n                                        </div>\n                                        <div>\n                                            <p></p>\n                                            <div></div>\n                                        </div>\n                                    </FormBlockAnimation>\n                                    <FormBlockAnimation>\n                                        <div>\n                                            <p></p>\n                                            <div></div>\n                                        </div>\n                                        <div>\n                                            <p></p>\n                                            <div></div>\n                                        </div>\n                                    </FormBlockAnimation>\n                                </>}\n                                {!users.oneUserLoading && users.oneUserLoadingError === false && users.oneUser.hasOwnProperty('uuid') &&\n                                    <form onSubmit={handleSubmit(editUser)}>\n                                        <div className=\"card-body\">\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"exampleInputEmail1\">Prénom</label>\n                                                <input\n                                                    type=\"firstname\"\n                                                    className={\"form-control \" + (errors.firstname && ` is-border-red`)}\n                                                    defaultValue={users.oneUser.first_name}\n                                                    placeholder=\"Prénom de l'utilisateur\"\n                                                    {...register('firstname')}\n                                                />\n                                                {errors.firstname && <small className=\"form-text is-red\">{errors.firstname.message}</small>}\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"exampleInputEmail1\">Nom</label>\n                                                <input\n                                                    type=\"lastname\"\n                                                    className={\"form-control \" + (errors.lastname && `is-border-red`)}\n                                                    placeholder=\"Nom de l'utilisateur\"\n                                                    defaultValue={users.oneUser.last_name}\n                                                    {...register('lastname')}\n                                                />\n                                                {errors.lastname && <small className=\"form-text is-red\">{errors.lastname.message}</small>}\n                                            </div>\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"exampleInputEmail1\">Email</label>\n                                                <input\n                                                    type=\"email\"\n                                                    className={\"form-control \" + (errors.email && `is-border-red`)}\n                                                    placeholder=\"Entre votre email\"\n                                                    defaultValue={users.oneUser.email}\n                                                    {...register('email')}\n                                                />\n                                                {errors.email && <small className=\"form-text is-red\">{errors.email.message}</small>}\n                                            </div>\n\n                                            <div className=\"form-group\">\n                                                <label htmlFor=\"exampleInputEmail1\">Role</label>\n                                                <select\n                                                    className={\"form-control \" + (errors.role && `is-border-red`)}\n                                                    {...register('role')}\n                                                    defaultValue={users.oneUser.role_id}\n                                                >\n                                                    <option value=\"1\">Administrateur</option>\n                                                    <option value=\"2\">Client</option>\n                                                    <option value=\"3\">Agent</option>\n                                                    <option value=\"4\">Salarié</option>\n                                                </select>\n                                                {errors.role && <small className=\"form-text text-muted is-danger\">{errors.role.message}</small>}\n                                            </div>\n                                        </div>\n                                        {/* /.card-body */}\n                                        <div className=\"card-footer\">\n                                            <button type=\"submit\" className=\"btn btn-primary\" disabled={isSubmitting}>{isSubmitting ? 'Sauvegarde en cours...' : 'Enregistrer'}</button>\n                                        </div>\n                                    </form>\n                                }\n                            </div>\n                            {/* /.card */}\n                        </div>\n                    </div>\n                    {/* /.row */}\n                </div>{/* /.container-fluid */}\n            </section>\n            {/* /.content */}\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.users\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchOneUser: (uuid) => dispatch(fetchOneUser(uuid)),\n        updateUser: (user, uuid) => dispatch(updateUser(user, uuid)),\n    }\n}\n\n\nconst FormBlockAnimation = styled.div`\n    display: flex;\n    padding: 1px 4px;\n    flex-wrap: wrap;\n\n    & > div {\n        flex-grow: 1;\n        height: 70px;\n        display: flex;\n        flex-direction: column;\n        padding:6px;\n    }\n\n    & > div > p {\n        height: 20px;\n        width: 30%;\n        animation: skeleton-loading 1s linear infinite alternate;\n        border-radius: 4px;\n        margin: 8px 0px;\n        @keyframes skeleton-loading {\n            0% {\n                background-color: hsl(200, 10%, 80%);\n            }\n    \n            100% {\n                background-color:  hsl(200, 20%, 95%);\n            }\n        }\n    }\n\n    & > div > div {\n        max-height: 35px;\n        border-radius: 4px;\n        height: 35px;\n        width: 100%;\n        animation: skeleton-loading 1s linear infinite alternate;\n        @keyframes skeleton-loading {\n            0% {\n                background-color: hsl(200, 10%, 80%);\n            }\n    \n            100% {\n                background-color:  hsl(200, 20%, 95%);\n            }\n        }\n    }\n`\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditUser);"],"names":["UserService","page","perPage","axios","API_URL","then","response","data","user","value","uuid","fetchUsersFailure","error","type","FETCH_USER_FAILURE","payload","setUsersPerPage","USERS_PER_PAGE","setPage","USERS_CURRENT_PAGE","setTotalPage","total","TOTAL_PAGES","searching","SEARCHING","searchSuccess","users","last_page","SEARCH_SUCCESS","fetchUsers","dispatch","getState","FETCH_USERS_REQUEST","searchValue","length","totalPage","Math","ceil","per_page","current_page","FETCH_USERS_SUCCESS","fetchUsersSuccess","Promise","resolve","message","reject","searchUsers","initialUsers","RESET","initialTotalPages","storeUser","STORING_USER","RESET_FORM","toast","fetchOneUser","ONE_USER_REQUEST","FETCH_ONE_USER_SUCCESS","fetchOneUserRequestSucces","FETCH_ONE_USER_ERROR","switchUserStatus","status","SWITCH_STATUS","switchStatus","updateUser","console","log","test","state","FormBlockAnimation","styled","connect","useParams","userSchema","object","firstname","string","required","typeError","lastname","email","result","role","mixed","oneOf","useForm","mode","resolver","yupResolver","register","formState","handleSubmit","useEffect","isSubmitting","errors","className","oneUserLoading","oneUserLoadingError","oneUser","hasOwnProperty","onSubmit","htmlFor","defaultValue","first_name","placeholder","last_name","role_id","disabled"],"sourceRoot":""}